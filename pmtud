#! /usr/bin/env sh

set -u

# Simplistic Path MTU Discovery using ICMP Echo Request probes.
#
# Copyright (C) 2017-2019 Erik Auerswald <auerswal@unix-ag.uni-kl.de>
#
# Copying and distribution of this file, with or without modification,
# are permitted in any medium without royalty provided the copyright
# notice and this notice are preserved.  This file is offered as-is,
# without any warranty.

# Simplistic Path MTU Discovery using ICMP Echo Request probes, may be fooled
# by networks limiting ICMP Echo Request size. Intended use is for PMTUD over
# VPN in broken networks, where standard PMTUD does not work, but the VPN
# hides that the probe packets are ICMP Echo Requests and thus allows the
# script to work.

# Some versions of the Ping program from iputils fragments IPv6 probe
# packets to conform to the local MTU even with the "-M do" option that
# shall prevent local fragmentation. Thus the results of this program
# may be wrong if an IPv6 end point is specified.

VERSION='2019-07-22-01'
PROG="$(basename $0)"
ALGO='binary'
OVERHEAD=28
MIN=68
INCREMENT=10
TABLE='65535 32000 17914 9000 8166 4352 2002 1500 1492 1280 1024 1006 576 508 296 68'
MAX='auto'
WAIT='.15'
TARGET=''
PROBETIMEOUT='2'
PINGOPTS="-c1 -Mdo -n -W${PROBETIMEOUT}"
QUIET=''

version() { echo "$PROG version $VERSION"; }

copyright()
{
  echo 'Copyright (C) 2017-2019 by Erik Auerswald <auerswal@unix-ag.uni-kl.de>'
}

license()
{
  cat <<EOF
Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.  This file is offered as-is,
without any warranty.
EOF
}

usage()
{
  echo "Usage: $PROG [OPTIONS] {IP | HOSTNAME}"
  echo "Help:  $PROG -h"
}

help()
{
  version
  copyright
  usage
  cat <<EOF

Path MTU discovery to given IP / HOSTNAME using ICMP Echo Request probes.
The $ALGO search strategy is used by default.
The upper search limit is automatically determined by using the current
interface MTU of the outgoing interface, if possible, unless given
via option.
The result may be wrong (i.e. too low) if network or target host limit
ICMP Echo Request packet size, or if the probes are sent faster than a
rate limit in network or target host allows.

Options:
  -h            print this help and exit
  -V            print version and exit
  -L            print license and exit
  -l            use linear search strategy for path MTU discovery
  -b            use binary search strategy for path MTU discovery
  -p            use plateau table based search as suggested in RFC 1191
  -P VALUES     specify alternate plateau table (values separated by whitespace)
  -m MIN        set minimum probe size in bytes (default ${MIN})
  -M MAX        set maximum probe size in bytes (default ${MAX})
  -i INCREMENT  set linear search increment size in bytes (default ${INCREMENT})
  -w WAIT       set time waited between probes (default ${WAIT}s)
  -W TIMEOUT    set probe timeout (default ${PROBETIMEOUT}s)
  -o OVERHEAD   set overhead in bytes added by ping (default ${OVERHEAD})
  -q            quiet operation: omit progress messages

Plateau search uses the following values:
  ${TABLE}
EOF
}

# error_msg() prints its parameters as a line to STDERR
error_msg()
{
  echo "[!] ${PROG}: ERROR: $*" 1>&2
}

while getopts ':hVLlbpP:m:M:i:w:W:o:q' OPT; do
  case "$OPT" in
    'h') help; exit 0;;
    'V') version; exit 0;;
    'L') version; copyright; license; exit 0;;
    'l') ALGO='linear';;
    'b') ALGO='binary';;
    'p') ALGO='plateau';;
    'P') TABLE="$OPTARG";;
    'm') MIN="$OPTARG";;
    'M') MAX="$OPTARG";;
    'i') INCREMENT="$OPTARG";;
    'w') WAIT="$OPTARG";;
    'W') PROBETIMEOUT="$OPTARG"; PINGOPTS="-c1 -Mdo -n -W${PROBETIMEOUT}";;
    'o') OVERHEAD="$OPTARG";;
    'q') QUIET='quiet';;
    '?') error_msg "unknown option '$OPTARG'"; usage; exit 1;;
    ':') error_msg "argument required for option '$OPTARG'"; usage; exit 1;;
    *) error_msg "option '$OPT' not implemented"; usage; exit 1;;
  esac
done
shift $(($OPTIND - 1))

test $# -lt 1 && { error_msg "no target host given"; usage; exit 1; }
test $# -gt 1 && { error_msg "ERROR: too many arguments"; usage; exit 1; }
test $# -eq 1 && { TARGET="$1"; shift; }

test -z "$QUIET" && { exec 3>&1; } || { exec 3>/dev/null; }

# auto_max() attempts to determine the outgoing link's MTU
auto_max()
{
  DEVICE=$(ip route get "$TARGET" | sed -nr 's/^.*dev +([^ ]+) .*$/\1/p')
  ip link show dev "$DEVICE" | sed -nr 's/^.*mtu +([^ ]+) .*$/\1/p'
}

test "x${MAX}x" = 'xautox' && MAX=$(auto_max 2>/dev/null)
MAX=${MAX:-1500}
test "${MAX}" -ge 65535 && MAX=65535

# send_probe() has exactly two mandatory parameters:
# 1) the probe size in bytes
# 2) the target IP address or host name
# if the probe is successful, the function will return 0 and print the probe
# size to STDOUT
send_probe()
{
  test $# -eq 2 || {
    error_msg 'send_probe(): wrong number of arguments:' "$#"; return 1;
  }
  S="$1"
  TARGET="$2"
  ping $PINGOPTS -s "$(($S - $OVERHEAD))" "$TARGET" >/dev/null 2>&1 && echo "$S"
}

binary()
{
  local LOW
  local HIGH
  local PROBE

  cat 1>&3 <<EOF
[-] performing binary search IP PMTUD to $TARGET with ICMP Echo Requests
[-] search_low starts at $MIN bytes, search_high starts at $MAX bytes
[-] waiting $WAIT seconds between probes with $PROBETIMEOUT seconds timeout
[-] for unsuccessful probes
EOF

  LOW=$MIN
  HIGH=$MAX
  while test "$LOW" -le "$HIGH"; do
    PROBE=$((($LOW + $HIGH) / 2))
    printf -- '[.] sending %s bytes probe   \r' "$PROBE" 1>&3
    send_probe "$PROBE" "$TARGET"
    if test $? -eq 0; then
      LOW=$(($PROBE+1))
    else
      HIGH=$(($PROBE-1))
    fi
    sleep "$WAIT"
  done | sed -n '$s/^\(.*\)$/[+] IP PMTU is \1 bytes         /p'
  echo '[+] all probes returned or timed out' 1>&3
}

linear()
{
  cat 1>&3 <<EOF
[-] performing linear search IP PMTUD to $TARGET with ICMP Echo Requests
[-] search_low $MIN bytes, search_high $MAX bytes, $INCREMENT byte(s) increments
[-] waiting $WAIT seconds between probes with $PROBETIMEOUT seconds timeout
[-] for unsuccessful probes
EOF

  for S in $(seq "$MIN" "$INCREMENT" "$MAX"); do
    printf -- '[.] sending %s bytes probe\r' "$S" 1>&3
    send_probe "$S" "$TARGET" &
    sleep "$WAIT"
  done | sort -n | sed -n '$s/^\(.*\)$/[+] IP PMTU is \1 bytes/p'
  echo '[+] all probes returned or timed out' 1>&3
}

plateau()
{
  cat 1>&3 <<EOF
[-] performing plateau table based IP PMTUD to $TARGET with ICMP Echo Requests
[-] values: $TABLE
[-] using values between $MIN bytes and $MAX bytes
[-] waiting $WAIT seconds between probes with $PROBETIMEOUT seconds timeout
[-] for unsuccessful probes
EOF

  for S in $TABLE; do
    test "$S" -gt "$MAX" && continue
    test "$S" -lt "$MIN" && continue
    printf -- '[.] sending %s bytes probe   \r' "$S" 1>&3
    send_probe "$S" "$TARGET" &
    sleep "$WAIT"
  done | sort -n | \
    sed -n '$s/^\(.*\)$/[+] plateau estimate for IP PMTU is \1 bytes/p'
  echo '[+] all probes returned or timed out' 1>&3
}

PMTU=$("$ALGO")
test -n "$PMTU" && echo "$PMTU" || {
  error_msg 'could not determine PMTU'
  exit 1
}

# vim:expandtab:
